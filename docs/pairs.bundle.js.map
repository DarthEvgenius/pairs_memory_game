{"version":3,"file":"pairs.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrB2D;AACyB;AAC7B;AACX;AAC5C;AACO;AACP;AACA;AACA;AACA,kBAAkB,+DAAY;AAC9B;AACA;AACA;AACA,+BAA+B,oEAAoB;AACnD,6BAA6B,uDAAW;AACxC;AACA;AACA,iBAAiB,uDAAW;AAC5B;AACA;AACA,gBAAgB,6DAAa;AAC7B;AACA,oBAAoB,yDAAS;AAC7B,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA,wBAAwB,yDAAS;AACjC,qBAAqB;AACrB;AACA,cAAc;AACd;AACA;AACA;AACA,iCAAiC,0DAAO,iCAAiC;AACzE;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AACiD;AACjD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,IAAI,8DAAc;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,MAAM;AAC9B;AACA;;;;;;;;;;;;;;;AC9HA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;ACzBA;AACuD;AACvD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,IAAI,oEAAoB;AACxB;;;;;;;;;;;;;;;;ACrBgD;AAChD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UClBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNuH;AAC5D;AACZ;AACA;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAqB;AAC7C;AACA;AACA,uEAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAS;AACjB,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wEAAoB;AAC7C,IAAI,sEAAmB;AACvB,IAAI,kEAAe;AACnB,IAAI,4DAAS;AACb,C","sources":["webpack://pairs/./src/js/conditions.mjs","webpack://pairs/./src/js/gameLogic.mjs","webpack://pairs/./src/js/interface.mjs","webpack://pairs/./src/js/matchHandler.mjs","webpack://pairs/./src/js/resetGame.mjs","webpack://pairs/./src/js/timer.mjs","webpack://pairs/webpack/bootstrap","webpack://pairs/webpack/runtime/define property getters","webpack://pairs/webpack/runtime/hasOwnProperty shorthand","webpack://pairs/webpack/runtime/make namespace object","webpack://pairs/./src/pairs.mjs"],"sourcesContent":["// get start options\r\n// creates object with game conditions:\r\n    // main array of pairs\r\n    // win counter\r\n    // waiter, for some animations\r\n    // number of pairs (difficulty level)\r\n\r\n\r\nexport function createGameConditions(interfaceObject) {\r\n    const pairsAmount = +interfaceObject.difficulty.value;\r\n    const isTimer = interfaceObject.timer.checked;\r\n    \r\n    const arr = Array.from({length: pairsAmount}, (elem, i) => i + 1);\r\n    return {\r\n        winCounter: pairsAmount,\r\n        pairsArray: [...arr, ...arr],\r\n        waiter: false,\r\n        difficulty: pairsAmount,\r\n        isTimer: isTimer\r\n    }\r\n}\r\n\r\n","import { matchCounter, noMatch } from './matchHandler.mjs';\r\nimport { winInterface, loseInterface, createTimerContainer } from './interface.mjs';\r\nimport { createTimer, updateTimer } from './timer.mjs';\r\nimport { resetGame } from \"./resetGame.mjs\";\r\n\r\nexport function startGame(interfaceObject, gameConditions) {\r\n    gameConditions.waiter = false;\r\n    // array for two opened cards in one turn\r\n    let selectedCards = [];\r\n    const match = matchCounter();\r\n    let timerID = null;\r\n\r\n    if (gameConditions.isTimer) {\r\n        const timerContainer = createTimerContainer(interfaceObject);\r\n        const timerCounter = createTimer(interfaceObject);\r\n        \r\n        timerID = setInterval(() => {\r\n            if (!updateTimer(timerContainer, timerCounter, timerID)) {\r\n                // stop user's interactions with game field\r\n                interfaceObject.gameContainer.style.pointerEvents = 'none';\r\n                loseInterface(interfaceObject);\r\n                setTimeout(() => {\r\n                    resetGame(interfaceObject);\r\n                }, 4000);\r\n            }\r\n            \r\n        }, 1000);\r\n\r\n        interfaceObject.resetBtn.addEventListener('click', function() {\r\n            clearInterval(timerID);\r\n        });\r\n        interfaceObject.refreshBtn.addEventListener('click', function() {\r\n            clearInterval(timerID);\r\n        });\r\n    } else {\r\n        let timerContainer = document.querySelector('.timer_container');\r\n        if (timerContainer) {\r\n            timerContainer.innerHTML = '';\r\n        }\r\n    }\r\n    \r\n    // main logic\r\n    interfaceObject.gameContainer.addEventListener('click', function game(e) {\r\n        // selects only click inside card\r\n        const target = e.target.closest('.game_card');\r\n\r\n        // ignore:\r\n            // clicks out of cards\r\n            // already matched cards\r\n            // already opened cards\r\n            // waiter is set to true\r\n        if (!target ||\r\n                [...target.classList].includes('match') || \r\n                selectedCards.includes(target) ||\r\n                gameConditions.waiter) {\r\n            return;\r\n        }\r\n\r\n        // if it's first opened card >> push it to selected array\r\n        if (selectedCards.length < 2) {\r\n            selectedCards.push(target);\r\n            target.classList.add('open');\r\n        }\r\n\r\n        // when we have two opened cards >> check values\r\n        if (selectedCards.length == 2) {\r\n            if (selectedCards[0].dataset.value == selectedCards[1].dataset.value) {\r\n                // handle CSS classes and update winCounter\r\n                // check for win case\r\n                if (match(selectedCards, gameConditions)) {\r\n                    clearInterval(timerID);\r\n                    selectedCards.length = 0;\r\n                    gameConditions.waiter = true; \r\n                    interfaceObject.gameContainer.removeEventListener('click', game);\r\n                    winInterface(interfaceObject);\r\n                    setTimeout(() => {\r\n                        resetGame(interfaceObject);\r\n                    }, 4000);\r\n                }\r\n            } else {\r\n                // pause interactions for complete animation \r\n                gameConditions.waiter = true;\r\n                // handle CSS classes and update waiter\r\n                setTimeout(()=>{ noMatch(selectedCards, gameConditions) }, 1000);\r\n            }\r\n        }\r\n    });    \r\n}\r\n","// Interface staff\r\n\r\nimport { resetInterface } from \"./resetGame.mjs\";\r\n\r\n// main interface object\r\nexport function createInterfaceObject() {\r\n    const gameContainer = document.querySelector('.game_container');\r\n    const gameControls = document.querySelector('.game_controls');\r\n    const startControls = document.querySelector('.start_controls');\r\n    const difficultySelect = startControls.querySelector('#difficulty_options');\r\n    const timer = startControls.querySelector('#timer_options');\r\n\r\n    return { \r\n        gameContainer: gameContainer,\r\n        startControls: startControls,\r\n        gameControls: gameControls,\r\n        startBtn: startBtn(),\r\n        refreshBtn: refreshBtn(),\r\n        resetBtn: resetBtn(),\r\n        difficulty: difficultySelect,\r\n        timer: timer,\r\n        timerRange: 60\r\n    };\r\n}\r\n\r\n// hide game controls and show start options\r\nexport function createStartInterface(interfaceObject) {\r\n    // hide game controls\r\n    // set grid for the initial case\r\n    interfaceObject.gameControls.style.display = 'grid';\r\n    interfaceObject.gameControls.classList.add('hide');\r\n    // show start options\r\n    interfaceObject.startControls.classList.remove('hide');\r\n\r\n}\r\n\r\n// hide start controls and show game controls\r\nexport function createGameInterface(interfaceObject) {\r\n    // show refresh/reset buttons\r\n    // hide start buttons\r\n    interfaceObject.startControls.classList.add('hide');    \r\n    interfaceObject.gameControls.classList.remove('hide');\r\n}\r\n\r\n// create timer DOM structure\r\n// returns timer's inner element for seconds display\r\nexport function createTimerContainer(interfaceObject) {\r\n    let container = document.querySelector('.timer_container');\r\n    if (!container) {\r\n        container = document.createElement('div');\r\n        container.classList.add('timer_container');\r\n    } else {\r\n        container.innerHTML = '';\r\n    }\r\n\r\n    const timer = document.createElement('span');\r\n    timer.textContent = interfaceObject.timerRange;\r\n    container.append(timer);\r\n    interfaceObject.gameControls.prepend(container);\r\n    return timer;    \r\n}\r\n\r\n// creates new game field \r\n// depends on difficulty\r\nexport function createGameField(interfaceObject, gameConditions) {\r\n    // reset conditions and DOM element's classes\r\n    resetInterface(interfaceObject);\r\n    \r\n    // save original array\r\n    const len = gameConditions.pairsArray.length;\r\n    let arr = [];\r\n    arr = Array.from(gameConditions.pairsArray);\r\n\r\n    // if difficulty level is hard - change container\r\n    if (len == 20) {\r\n        interfaceObject.gameContainer.classList.add('game_container--hard');\r\n    }\r\n\r\n    // create cards\r\n    for (let i = 0; i < len; i++) {\r\n        // pick random index of arr\r\n        // use exactly array, as each iteration it's getting shorter\r\n        const index = Math.floor(Math.random() * arr.length);\r\n        const card = createCard(arr[index]);\r\n        interfaceObject.gameContainer.append(card);        \r\n        // each time delete element\r\n        arr.splice(index, 1);\r\n    }\r\n}\r\n\r\n// handle win/lose cases\r\nexport function winInterface(interfaceObject) {\r\n    interfaceObject.gameContainer.classList.add('win');\r\n    document.querySelector('.win_modal').classList.add('show');\r\n}\r\n\r\nexport function loseInterface(interfaceObject) {\r\n    interfaceObject.gameContainer.classList.add('lose');\r\n    document.querySelector('.lose_modal').classList.add('show');\r\n}\r\n\r\n// start button\r\nconst startBtn = () => {\r\n    const startBtn = document.querySelector('.start_button');\r\n    startBtn.style.display = 'inline-block';\r\n    return startBtn;\r\n}\r\n\r\nconst refreshBtn = () => {\r\n    const refreshBtn = document.querySelector('.refresh_btn');    \r\n    return refreshBtn;\r\n}\r\n\r\n// reset button\r\nconst resetBtn = () => {\r\n    const resetBtn = document.querySelector('.reset_btn');\r\n    return resetBtn;\r\n}\r\n\r\n\r\nfunction createCard(value) {\r\n    const card = document.createElement('div');\r\n    card.classList.add('game_card');\r\n    card.dataset.value = value;\r\n    card.innerHTML = `${value}`;\r\n    return card;\r\n}","// game logics on match/no match\r\n// make counter on each new game\r\nexport function matchCounter() {\r\n    let counter = 0;\r\n    \r\n    return function(selectedCards, gameConditions) {\r\n        selectedCards.forEach(e => {\r\n            e.classList.remove('open');\r\n            e.classList.add('match');\r\n        });\r\n        selectedCards.length = 0;\r\n\r\n        counter++;\r\n        \r\n        return counter == gameConditions.winCounter;\r\n    };\r\n}\r\n\r\n\r\nexport function noMatch(selectedCards, gameConditions) {\r\n    selectedCards.forEach(e => {\r\n        e.classList.remove('open');\r\n    })\r\n    selectedCards.length = 0;    \r\n    gameConditions.waiter = false;\r\n}","// reset game interface DOM elements\r\nimport { createStartInterface } from './interface.mjs';\r\n\r\nexport function resetInterface(interfaceObject) {\r\n    // hide win/lose modals\r\n    document.querySelector('.win_modal').classList.remove('show');\r\n    document.querySelector('.lose_modal').classList.remove('show');\r\n\r\n    // if there was timer - remove\r\n    document.querySelector('.timer_container')?.remove();\r\n\r\n    // refresh game container\r\n    const newContainer = document.createElement('div');\r\n    newContainer.classList.add('game_container');\r\n    interfaceObject.gameContainer.replaceWith(newContainer);\r\n    return interfaceObject.gameContainer = newContainer;\r\n}\r\n\r\nexport function resetGame(interfaceObject) {\r\n    resetInterface(interfaceObject);    \r\n    createStartInterface(interfaceObject);\r\n}","import { loseInterface } from './interface.mjs';\r\n\r\nexport function createTimer(interfaceObject) {\r\n    let timer = interfaceObject.timerRange;\r\n    return function() {\r\n        return --timer;\r\n    }\r\n}\r\n\r\nexport function updateTimer(timerContainer, timerCounter, timerID) {\r\n    const counter = timerCounter();\r\n    timerContainer.textContent = counter;\r\n\r\n    if (counter <= 0) {\r\n        clearInterval(timerID);\r\n        return false;\r\n    }\r\n    return true;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { createInterfaceObject, createStartInterface, createGameField, createGameInterface } from './js/interface.mjs';\r\nimport { createGameConditions } from './js/conditions.mjs';\r\nimport { startGame } from './js/gameLogic.mjs';\r\nimport { resetGame } from \"./js/resetGame.mjs\";\r\n\r\n// game container\r\n// start button,\r\n// reset button,\r\n// difficulty select element\r\n// const startInterface = createStartInterface();\r\n\r\nconst interfaceObject = createInterfaceObject();\r\nconsole.log(interfaceObject);\r\n\r\ncreateStartInterface(interfaceObject);\r\n\r\n\r\ninterfaceObject.startBtn.onclick = newGame;\r\ninterfaceObject.refreshBtn.onclick = newGame;\r\ninterfaceObject.resetBtn.addEventListener('click', function() {  \r\n    \r\n    const animated = interfaceObject.gameContainer;\r\n    animated.classList.add('hide');\r\n    \r\n    setTimeout(() => {\r\n        resetGame(interfaceObject);\r\n    }, 500);\r\n});\r\n\r\nfunction newGame() {\r\n    // create game conditions\r\n        // pairsArray\r\n        // winCounter\r\n        // waiter\r\n        // number of pairs (difficulty level)\r\n    let gameConditions = createGameConditions(interfaceObject);\r\n    createGameInterface(interfaceObject, gameConditions);\r\n    createGameField(interfaceObject, gameConditions);\r\n    startGame(interfaceObject, gameConditions);\r\n}"],"names":[],"sourceRoot":""}